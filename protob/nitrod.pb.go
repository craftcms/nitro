// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.15.8
// source: protob/nitrod.proto

package protob

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_nitrod_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protob_nitrod_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_protob_nitrod_proto_rawDescGZIP(), []int{0}
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_nitrod_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protob_nitrod_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_protob_nitrod_proto_rawDescGZIP(), []int{1}
}

func (x *PingResponse) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_nitrod_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protob_nitrod_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_protob_nitrod_proto_rawDescGZIP(), []int{2}
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_nitrod_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protob_nitrod_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_protob_nitrod_proto_rawDescGZIP(), []int{3}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sites map[string]*Site `protobuf:"bytes,1,rep,name=sites,proto3" json:"sites,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ApplyRequest) Reset() {
	*x = ApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_nitrod_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRequest) ProtoMessage() {}

func (x *ApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protob_nitrod_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRequest.ProtoReflect.Descriptor instead.
func (*ApplyRequest) Descriptor() ([]byte, []int) {
	return file_protob_nitrod_proto_rawDescGZIP(), []int{4}
}

func (x *ApplyRequest) GetSites() map[string]*Site {
	if x != nil {
		return x.Sites
	}
	return nil
}

type ApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ApplyResponse) Reset() {
	*x = ApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_nitrod_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyResponse) ProtoMessage() {}

func (x *ApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protob_nitrod_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyResponse.ProtoReflect.Descriptor instead.
func (*ApplyResponse) Descriptor() ([]byte, []int) {
	return file_protob_nitrod_proto_rawDescGZIP(), []int{5}
}

func (x *ApplyResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ApplyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Aliases  string `protobuf:"bytes,2,opt,name=aliases,proto3" json:"aliases,omitempty"`
	Port     int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Force    bool   `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *Site) Reset() {
	*x = Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_nitrod_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site) ProtoMessage() {}

func (x *Site) ProtoReflect() protoreflect.Message {
	mi := &file_protob_nitrod_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site.ProtoReflect.Descriptor instead.
func (*Site) Descriptor() ([]byte, []int) {
	return file_protob_nitrod_proto_rawDescGZIP(), []int{6}
}

func (x *Site) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Site) GetAliases() string {
	if x != nil {
		return x.Aliases
	}
	return ""
}

func (x *Site) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Site) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DatabaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// engine is the type of database (e.g. mysql or postgres)
	Engine string `protobuf:"bytes,1,opt,name=engine,proto3" json:"engine,omitempty"`
	// version is the database version (e.g. 5.7 or 13)
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// port is the port used to connect to the datbase (e.g. 3306)
	Port string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	// hostname is the container name used to connect (e.g. mysql-5.7-3306.database.nitro)
	Hostname string `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// datbase is the name of the database
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	// if the client was able to detect the database is compressed (only used during importing)
	Compressed bool `protobuf:"varint,6,opt,name=compressed,proto3" json:"compressed,omitempty"`
	// the kind of compression type, e.g. zip or tar
	CompressionType string `protobuf:"bytes,7,opt,name=compressionType,proto3" json:"compressionType,omitempty"`
}

func (x *DatabaseInfo) Reset() {
	*x = DatabaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_nitrod_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseInfo) ProtoMessage() {}

func (x *DatabaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protob_nitrod_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseInfo.ProtoReflect.Descriptor instead.
func (*DatabaseInfo) Descriptor() ([]byte, []int) {
	return file_protob_nitrod_proto_rawDescGZIP(), []int{7}
}

func (x *DatabaseInfo) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *DatabaseInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DatabaseInfo) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *DatabaseInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DatabaseInfo) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DatabaseInfo) GetCompressed() bool {
	if x != nil {
		return x.Compressed
	}
	return false
}

func (x *DatabaseInfo) GetCompressionType() string {
	if x != nil {
		return x.CompressionType
	}
	return ""
}

type AddDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database *DatabaseInfo `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *AddDatabaseRequest) Reset() {
	*x = AddDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_nitrod_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDatabaseRequest) ProtoMessage() {}

func (x *AddDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protob_nitrod_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDatabaseRequest.ProtoReflect.Descriptor instead.
func (*AddDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_protob_nitrod_proto_rawDescGZIP(), []int{8}
}

func (x *AddDatabaseRequest) GetDatabase() *DatabaseInfo {
	if x != nil {
		return x.Database
	}
	return nil
}

type AddDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddDatabaseResponse) Reset() {
	*x = AddDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_nitrod_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDatabaseResponse) ProtoMessage() {}

func (x *AddDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protob_nitrod_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDatabaseResponse.ProtoReflect.Descriptor instead.
func (*AddDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_protob_nitrod_proto_rawDescGZIP(), []int{9}
}

func (x *AddDatabaseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ImportDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*ImportDatabaseRequest_Database
	//	*ImportDatabaseRequest_Data
	Payload isImportDatabaseRequest_Payload `protobuf_oneof:"payload"`
}

func (x *ImportDatabaseRequest) Reset() {
	*x = ImportDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_nitrod_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDatabaseRequest) ProtoMessage() {}

func (x *ImportDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protob_nitrod_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDatabaseRequest.ProtoReflect.Descriptor instead.
func (*ImportDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_protob_nitrod_proto_rawDescGZIP(), []int{10}
}

func (m *ImportDatabaseRequest) GetPayload() isImportDatabaseRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ImportDatabaseRequest) GetDatabase() *DatabaseInfo {
	if x, ok := x.GetPayload().(*ImportDatabaseRequest_Database); ok {
		return x.Database
	}
	return nil
}

func (x *ImportDatabaseRequest) GetData() []byte {
	if x, ok := x.GetPayload().(*ImportDatabaseRequest_Data); ok {
		return x.Data
	}
	return nil
}

type isImportDatabaseRequest_Payload interface {
	isImportDatabaseRequest_Payload()
}

type ImportDatabaseRequest_Database struct {
	Database *DatabaseInfo `protobuf:"bytes,1,opt,name=database,proto3,oneof"`
}

type ImportDatabaseRequest_Data struct {
	// data is the data of the file, used in stream to reduce memory usage.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*ImportDatabaseRequest_Database) isImportDatabaseRequest_Payload() {}

func (*ImportDatabaseRequest_Data) isImportDatabaseRequest_Payload() {}

type ImportDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ImportDatabaseResponse) Reset() {
	*x = ImportDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_nitrod_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDatabaseResponse) ProtoMessage() {}

func (x *ImportDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protob_nitrod_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDatabaseResponse.ProtoReflect.Descriptor instead.
func (*ImportDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_protob_nitrod_proto_rawDescGZIP(), []int{11}
}

func (x *ImportDatabaseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RemoveDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database *DatabaseInfo `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *RemoveDatabaseRequest) Reset() {
	*x = RemoveDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_nitrod_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDatabaseRequest) ProtoMessage() {}

func (x *RemoveDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protob_nitrod_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDatabaseRequest.ProtoReflect.Descriptor instead.
func (*RemoveDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_protob_nitrod_proto_rawDescGZIP(), []int{12}
}

func (x *RemoveDatabaseRequest) GetDatabase() *DatabaseInfo {
	if x != nil {
		return x.Database
	}
	return nil
}

type RemoveDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RemoveDatabaseResponse) Reset() {
	*x = RemoveDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_nitrod_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDatabaseResponse) ProtoMessage() {}

func (x *RemoveDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protob_nitrod_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDatabaseResponse.ProtoReflect.Descriptor instead.
func (*RemoveDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_protob_nitrod_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveDatabaseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_protob_nitrod_proto protoreflect.FileDescriptor

var file_protob_nitrod_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x2f, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x22, 0x0d, 0x0a,
	0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x0c,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x22, 0x10, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x8d, 0x01, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x1a, 0x46, 0x0a, 0x0a, 0x53, 0x69, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e,
	0x53, 0x69, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x3f, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x66, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x0c, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x46, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x69, 0x74, 0x72,
	0x6f, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6c, 0x0a, 0x15, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x49, 0x0a, 0x15,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xa4, 0x03, 0x0a, 0x05,
	0x4e, 0x69, 0x74, 0x72, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x2e,
	0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x14, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6e, 0x69, 0x74, 0x72,
	0x6f, 0x64, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3c, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e,
	0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x1a, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x69,
	0x74, 0x72, 0x6f, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x2e, 0x6e,
	0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e, 0x69,
	0x74, 0x72, 0x6f, 0x64, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x51, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x1d, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protob_nitrod_proto_rawDescOnce sync.Once
	file_protob_nitrod_proto_rawDescData = file_protob_nitrod_proto_rawDesc
)

func file_protob_nitrod_proto_rawDescGZIP() []byte {
	file_protob_nitrod_proto_rawDescOnce.Do(func() {
		file_protob_nitrod_proto_rawDescData = protoimpl.X.CompressGZIP(file_protob_nitrod_proto_rawDescData)
	})
	return file_protob_nitrod_proto_rawDescData
}

var file_protob_nitrod_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_protob_nitrod_proto_goTypes = []interface{}{
	(*PingRequest)(nil),            // 0: nitrod.PingRequest
	(*PingResponse)(nil),           // 1: nitrod.PingResponse
	(*VersionRequest)(nil),         // 2: nitrod.VersionRequest
	(*VersionResponse)(nil),        // 3: nitrod.VersionResponse
	(*ApplyRequest)(nil),           // 4: nitrod.ApplyRequest
	(*ApplyResponse)(nil),          // 5: nitrod.ApplyResponse
	(*Site)(nil),                   // 6: nitrod.Site
	(*DatabaseInfo)(nil),           // 7: nitrod.DatabaseInfo
	(*AddDatabaseRequest)(nil),     // 8: nitrod.AddDatabaseRequest
	(*AddDatabaseResponse)(nil),    // 9: nitrod.AddDatabaseResponse
	(*ImportDatabaseRequest)(nil),  // 10: nitrod.ImportDatabaseRequest
	(*ImportDatabaseResponse)(nil), // 11: nitrod.ImportDatabaseResponse
	(*RemoveDatabaseRequest)(nil),  // 12: nitrod.RemoveDatabaseRequest
	(*RemoveDatabaseResponse)(nil), // 13: nitrod.RemoveDatabaseResponse
	nil,                            // 14: nitrod.ApplyRequest.SitesEntry
}
var file_protob_nitrod_proto_depIdxs = []int32{
	14, // 0: nitrod.ApplyRequest.sites:type_name -> nitrod.ApplyRequest.SitesEntry
	7,  // 1: nitrod.AddDatabaseRequest.database:type_name -> nitrod.DatabaseInfo
	7,  // 2: nitrod.ImportDatabaseRequest.database:type_name -> nitrod.DatabaseInfo
	7,  // 3: nitrod.RemoveDatabaseRequest.database:type_name -> nitrod.DatabaseInfo
	6,  // 4: nitrod.ApplyRequest.SitesEntry.value:type_name -> nitrod.Site
	0,  // 5: nitrod.Nitro.Ping:input_type -> nitrod.PingRequest
	4,  // 6: nitrod.Nitro.Apply:input_type -> nitrod.ApplyRequest
	2,  // 7: nitrod.Nitro.Version:input_type -> nitrod.VersionRequest
	8,  // 8: nitrod.Nitro.AddDatabase:input_type -> nitrod.AddDatabaseRequest
	10, // 9: nitrod.Nitro.ImportDatabase:input_type -> nitrod.ImportDatabaseRequest
	12, // 10: nitrod.Nitro.RemoveDatabase:input_type -> nitrod.RemoveDatabaseRequest
	1,  // 11: nitrod.Nitro.Ping:output_type -> nitrod.PingResponse
	5,  // 12: nitrod.Nitro.Apply:output_type -> nitrod.ApplyResponse
	3,  // 13: nitrod.Nitro.Version:output_type -> nitrod.VersionResponse
	9,  // 14: nitrod.Nitro.AddDatabase:output_type -> nitrod.AddDatabaseResponse
	11, // 15: nitrod.Nitro.ImportDatabase:output_type -> nitrod.ImportDatabaseResponse
	13, // 16: nitrod.Nitro.RemoveDatabase:output_type -> nitrod.RemoveDatabaseResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_protob_nitrod_proto_init() }
func file_protob_nitrod_proto_init() {
	if File_protob_nitrod_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protob_nitrod_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_nitrod_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_nitrod_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_nitrod_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_nitrod_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_nitrod_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_nitrod_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_nitrod_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_nitrod_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_nitrod_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_nitrod_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_nitrod_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_nitrod_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_nitrod_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protob_nitrod_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ImportDatabaseRequest_Database)(nil),
		(*ImportDatabaseRequest_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protob_nitrod_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protob_nitrod_proto_goTypes,
		DependencyIndexes: file_protob_nitrod_proto_depIdxs,
		MessageInfos:      file_protob_nitrod_proto_msgTypes,
	}.Build()
	File_protob_nitrod_proto = out.File
	file_protob_nitrod_proto_rawDesc = nil
	file_protob_nitrod_proto_goTypes = nil
	file_protob_nitrod_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NitroClient is the client API for Nitro service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NitroClient interface {
	// Ping returns pong when the API is online
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Apply takes a list of sites and services to configure caddy as a reverse proxy
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error)
	// Version returns the version of the API
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// AddDatabase is used to create a new database for a project
	AddDatabase(ctx context.Context, in *AddDatabaseRequest, opts ...grpc.CallOption) (*AddDatabaseResponse, error)
	// ImportDatabase is used to stream a database backup from the client to the proxy.
	ImportDatabase(ctx context.Context, opts ...grpc.CallOption) (Nitro_ImportDatabaseClient, error)
	// RemoveDatabase handles connecting to a database and removing the database from the engine
	RemoveDatabase(ctx context.Context, in *RemoveDatabaseRequest, opts ...grpc.CallOption) (*RemoveDatabaseResponse, error)
}

type nitroClient struct {
	cc grpc.ClientConnInterface
}

func NewNitroClient(cc grpc.ClientConnInterface) NitroClient {
	return &nitroClient{cc}
}

func (c *nitroClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/nitrod.Nitro/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nitroClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error) {
	out := new(ApplyResponse)
	err := c.cc.Invoke(ctx, "/nitrod.Nitro/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nitroClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/nitrod.Nitro/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nitroClient) AddDatabase(ctx context.Context, in *AddDatabaseRequest, opts ...grpc.CallOption) (*AddDatabaseResponse, error) {
	out := new(AddDatabaseResponse)
	err := c.cc.Invoke(ctx, "/nitrod.Nitro/AddDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nitroClient) ImportDatabase(ctx context.Context, opts ...grpc.CallOption) (Nitro_ImportDatabaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Nitro_serviceDesc.Streams[0], "/nitrod.Nitro/ImportDatabase", opts...)
	if err != nil {
		return nil, err
	}
	x := &nitroImportDatabaseClient{stream}
	return x, nil
}

type Nitro_ImportDatabaseClient interface {
	Send(*ImportDatabaseRequest) error
	CloseAndRecv() (*ImportDatabaseResponse, error)
	grpc.ClientStream
}

type nitroImportDatabaseClient struct {
	grpc.ClientStream
}

func (x *nitroImportDatabaseClient) Send(m *ImportDatabaseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nitroImportDatabaseClient) CloseAndRecv() (*ImportDatabaseResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportDatabaseResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nitroClient) RemoveDatabase(ctx context.Context, in *RemoveDatabaseRequest, opts ...grpc.CallOption) (*RemoveDatabaseResponse, error) {
	out := new(RemoveDatabaseResponse)
	err := c.cc.Invoke(ctx, "/nitrod.Nitro/RemoveDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NitroServer is the server API for Nitro service.
type NitroServer interface {
	// Ping returns pong when the API is online
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Apply takes a list of sites and services to configure caddy as a reverse proxy
	Apply(context.Context, *ApplyRequest) (*ApplyResponse, error)
	// Version returns the version of the API
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// AddDatabase is used to create a new database for a project
	AddDatabase(context.Context, *AddDatabaseRequest) (*AddDatabaseResponse, error)
	// ImportDatabase is used to stream a database backup from the client to the proxy.
	ImportDatabase(Nitro_ImportDatabaseServer) error
	// RemoveDatabase handles connecting to a database and removing the database from the engine
	RemoveDatabase(context.Context, *RemoveDatabaseRequest) (*RemoveDatabaseResponse, error)
}

// UnimplementedNitroServer can be embedded to have forward compatible implementations.
type UnimplementedNitroServer struct {
}

func (*UnimplementedNitroServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedNitroServer) Apply(context.Context, *ApplyRequest) (*ApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (*UnimplementedNitroServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedNitroServer) AddDatabase(context.Context, *AddDatabaseRequest) (*AddDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDatabase not implemented")
}
func (*UnimplementedNitroServer) ImportDatabase(Nitro_ImportDatabaseServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportDatabase not implemented")
}
func (*UnimplementedNitroServer) RemoveDatabase(context.Context, *RemoveDatabaseRequest) (*RemoveDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDatabase not implemented")
}

func RegisterNitroServer(s *grpc.Server, srv NitroServer) {
	s.RegisterService(&_Nitro_serviceDesc, srv)
}

func _Nitro_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NitroServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitrod.Nitro/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NitroServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nitro_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NitroServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitrod.Nitro/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NitroServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nitro_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NitroServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitrod.Nitro/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NitroServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nitro_AddDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NitroServer).AddDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitrod.Nitro/AddDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NitroServer).AddDatabase(ctx, req.(*AddDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nitro_ImportDatabase_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NitroServer).ImportDatabase(&nitroImportDatabaseServer{stream})
}

type Nitro_ImportDatabaseServer interface {
	SendAndClose(*ImportDatabaseResponse) error
	Recv() (*ImportDatabaseRequest, error)
	grpc.ServerStream
}

type nitroImportDatabaseServer struct {
	grpc.ServerStream
}

func (x *nitroImportDatabaseServer) SendAndClose(m *ImportDatabaseResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nitroImportDatabaseServer) Recv() (*ImportDatabaseRequest, error) {
	m := new(ImportDatabaseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Nitro_RemoveDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NitroServer).RemoveDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitrod.Nitro/RemoveDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NitroServer).RemoveDatabase(ctx, req.(*RemoveDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nitro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nitrod.Nitro",
	HandlerType: (*NitroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Nitro_Ping_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _Nitro_Apply_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Nitro_Version_Handler,
		},
		{
			MethodName: "AddDatabase",
			Handler:    _Nitro_AddDatabase_Handler,
		},
		{
			MethodName: "RemoveDatabase",
			Handler:    _Nitro_RemoveDatabase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImportDatabase",
			Handler:       _Nitro_ImportDatabase_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protob/nitrod.proto",
}
